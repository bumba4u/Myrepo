<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="1" failed="2" ignored="0" total="7" passed="4">
  <reporter-output>
  </reporter-output>
  <suite name="Learning TestNG" duration-ms="41" started-at="2018-04-02T21:52:14Z" finished-at="2018-04-02T21:52:14Z">
    <groups>
    </groups>
    <test name="Login 1" duration-ms="36" started-at="2018-04-02T21:52:14Z" finished-at="2018-04-02T21:52:14Z">
      <class name="LoginTest">
        <test-method status="PASS" signature="beforemethod()[pri:0, instance:LoginTest@670002]" name="beforemethod" is-config="true" duration-ms="0" started-at="2018-04-02T21:52:14Z" finished-at="2018-04-02T21:52:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforemethod -->
        <test-method status="PASS" signature="dologinTest(java.lang.String, java.lang.Integer, java.lang.String)[pri:0, instance:LoginTest@670002]" name="dologinTest" duration-ms="1" started-at="2018-04-02T21:52:14Z" data-provider="getData" finished-at="2018-04-02T21:52:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[xyz@gmail.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[howzz life]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dologinTest -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:LoginTest@670002]" name="afterMethod" is-config="true" duration-ms="0" started-at="2018-04-02T21:52:14Z" finished-at="2018-04-02T21:52:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforemethod()[pri:0, instance:LoginTest@670002]" name="beforemethod" is-config="true" duration-ms="0" started-at="2018-04-02T21:52:14Z" finished-at="2018-04-02T21:52:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforemethod -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:LoginTest@670002]" name="afterMethod" is-config="true" duration-ms="0" started-at="2018-04-02T21:52:14Z" finished-at="2018-04-02T21:52:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="dologinTest(java.lang.String, java.lang.Integer, java.lang.String)[pri:0, instance:LoginTest@670002]" name="dologinTest" duration-ms="0" started-at="2018-04-02T21:52:14Z" data-provider="getData" finished-at="2018-04-02T21:52:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[abc@gmail.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[444]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[life is good]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dologinTest -->
      </class> <!-- LoginTest -->
    </test> <!-- Login 1 -->
    <test name="Application 1" duration-ms="41" started-at="2018-04-02T21:52:14Z" finished-at="2018-04-02T21:52:14Z">
      <class name="AppliTest">
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:AppliTest@4df50bcc]" name="beforeTest" is-config="true" duration-ms="0" started-at="2018-04-02T21:52:14Z" finished-at="2018-04-02T21:52:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="FAIL" signature="LoginTest()[pri:1, instance:AppliTest@4df50bcc]" name="LoginTest" duration-ms="5" started-at="2018-04-02T21:52:14Z" finished-at="2018-04-02T21:52:14Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[The following asserts failed:
expected [B] but found [A]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: The following asserts failed:
expected [B] but found [A]
at org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)
at AppliTest.LoginTest(AppliTest.java:52)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginTest -->
        <test-method status="PASS" signature="beforemethod()[pri:0, instance:AppliTest@4df50bcc]" name="beforemethod" is-config="true" duration-ms="0" started-at="2018-04-02T21:52:14Z" finished-at="2018-04-02T21:52:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforemethod -->
        <test-method status="PASS" signature="aftermethod()[pri:0, instance:AppliTest@4df50bcc]" name="aftermethod" is-config="true" duration-ms="1" started-at="2018-04-02T21:52:14Z" finished-at="2018-04-02T21:52:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method status="SKIP" signature="passchTest()[pri:2, instance:AppliTest@4df50bcc]" name="passchTest" duration-ms="1" started-at="2018-04-02T21:52:14Z" depends-on-methods="AppliTest.LoginTest" finished-at="2018-04-02T21:52:14Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method AppliTest.passchTest()[pri:2, instance:AppliTest@4df50bcc] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method AppliTest.passchTest()[pri:2, instance:AppliTest@4df50bcc] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:887)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- passchTest -->
        <test-method status="PASS" signature="beforemethod()[pri:0, instance:AppliTest@4df50bcc]" name="beforemethod" is-config="true" duration-ms="0" started-at="2018-04-02T21:52:14Z" finished-at="2018-04-02T21:52:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforemethod -->
        <test-method status="PASS" signature="logoutTest()[pri:3, instance:AppliTest@4df50bcc]" name="logoutTest" duration-ms="0" started-at="2018-04-02T21:52:14Z" finished-at="2018-04-02T21:52:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logoutTest -->
        <test-method status="PASS" signature="aftermethod()[pri:0, instance:AppliTest@4df50bcc]" name="aftermethod" is-config="true" duration-ms="0" started-at="2018-04-02T21:52:14Z" finished-at="2018-04-02T21:52:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method status="PASS" signature="beforemethod()[pri:0, instance:AppliTest@4df50bcc]" name="beforemethod" is-config="true" duration-ms="1" started-at="2018-04-02T21:52:14Z" finished-at="2018-04-02T21:52:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforemethod -->
        <test-method status="PASS" signature="LoginTest1()[pri:4, instance:AppliTest@4df50bcc]" name="LoginTest1" duration-ms="0" started-at="2018-04-02T21:52:14Z" finished-at="2018-04-02T21:52:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginTest1 -->
        <test-method status="PASS" signature="aftermethod()[pri:0, instance:AppliTest@4df50bcc]" name="aftermethod" is-config="true" duration-ms="0" started-at="2018-04-02T21:52:14Z" finished-at="2018-04-02T21:52:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method status="PASS" signature="afterTest()[pri:0, instance:AppliTest@4df50bcc]" name="afterTest" is-config="true" duration-ms="0" started-at="2018-04-02T21:52:14Z" finished-at="2018-04-02T21:52:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
      </class> <!-- AppliTest -->
    </test> <!-- Application 1 -->
    <test name="Reg 1" duration-ms="36" started-at="2018-04-02T21:52:14Z" finished-at="2018-04-02T21:52:14Z">
      <class name="AppliTest">
        <test-method status="PASS" signature="Beforesuite()[pri:0, instance:AppliTest@4df50bcc]" name="Beforesuite" is-config="true" duration-ms="21" started-at="2018-04-02T21:52:14Z" finished-at="2018-04-02T21:52:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Beforesuite -->
        <test-method status="PASS" signature="aftersuite()[pri:0, instance:AppliTest@4df50bcc]" name="aftersuite" is-config="true" duration-ms="0" started-at="2018-04-02T21:52:14Z" finished-at="2018-04-02T21:52:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftersuite -->
      </class> <!-- AppliTest -->
      <class name="RegTest">
        <test-method status="FAIL" signature="doRegisterTest()[pri:0, instance:RegTest@1ed1993a]" name="doRegisterTest" duration-ms="5" started-at="2018-04-02T21:52:14Z" finished-at="2018-04-02T21:52:14Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[The following asserts failed:
expected [xxx] but found [xxx1],
expected [B] but found [A]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: The following asserts failed:
expected [xxx] but found [xxx1],
expected [B] but found [A]
at org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)
at RegTest.doRegisterTest(RegTest.java:20)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- doRegisterTest -->
      </class> <!-- RegTest -->
    </test> <!-- Reg 1 -->
  </suite> <!-- Learning TestNG -->
</testng-results>
